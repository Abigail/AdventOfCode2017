#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';

#
# Solution for the Infi Advent of Code 2017 problem
#

#
# Part 1
#
# Bij Infi houden wij niet van repetitief werk en dus proberen we dit
# jaar wat tijdrovende taken te automatiseren. Voor het uitdelen van
# de kerstcadeaus hebben wij daarom bezorgrobots gebouwd, zodat wij
# ons volledig kunnen richten op code committen en kerstborrels
# bezoeken.
# 
# Helaas zitten we pas op release 0.9, want we kwamen er achter dat
# soms meerdere robots op dezelfde plek uit kunnen komen en dat is
# natuurlijk niet efficiÃ«nt. We moeten dit snel oplossen door te
# bepalen hoe vaak deze situatie voorkomt, want het is al bijna de
# 25ste! Help jij mee?
# 
# Om te helpen met debuggen hebben we enkele logs beschikbaar gemaakt.
# Deze zijn in het volgende formaat opgeslagen:
# 
#     [sx1,sy1][sx2,sy2](x1,y1)(x2,y2)(x1,y1)
# 
# Eerst vind je tussen de blokhaken de startposities van de robots.
# Let op: schaalbaarheid is belangrijk, dus het aantal robots is
# variabel! Vervolgens bevat het log de bewegingen die door de robots
# uitgevoerd zijn, in dezelfde volgorde als dat de robots zijn
# gedefinieerd.
# 
# Voorbeeld:
# 
#     [0,0][1,1](1,0)(0,-1)(0,1)(-1,0)(-1,0)(0,1)(0,-1)(1,0)
#     
#         Robot 1 begint op 0,0 en Robot 2 begint op 1,1
#         Robot 1 gaat naar 1,0 (0,0 + 1,0)
#         Robot 2 gaat naar 1,0 (1,1 + 0,-1)
#         Twee robots op dezelfde plek. Dat is niet goed.
#         Robot 1 gaat naar 1,1 (1,0 + 0,1)
#         Robot 2 gaat naar 0,0 (1,0 + -1,0)
#         Robot 1 gaat naar 0,1 (1,1 + -1,0)
#         Robot 2 gaat naar 0,1 (0,0 + 0,1)
#         Weer twee robots op dezelfde plek.
#         Robot 1 gaat naar 0,0 (0,1 + 0,-1)
#         Robot 2 gaat naar 1,1 (0,1 + 1,0)
# 
# Kun jij uitrekenen hoe vaak alle robots tegelijk op dezelfde plek
# uitkomen voor het volgende logbestand?
#

#
# Part 2
#
# Dit is heel gek: tijdens het doorspitten van de logs ontdekten we
# een vreemd patroon in de bewegingen van de robots. Het lijkt erop
# dat de robots slimmer zijn dan we dachten en dat ze tijdens hun
# werkzaamheden een patroon hebben gemaakt dat ons niet eerder was
# opgevallen. This could be the AI we've been looking for: kun jij
# het geheime bericht vinden?
# 

@ARGV = "input" unless @ARGV;

local $/;
my $input = <>;

my @robots;
my @steps;

#
# Parse the input; we'll be agnostic to the amount of robots,
# or to the dimension of the space they work in.
#
my $number      = qr /[-+]?[0-9]+/;
my $number_list = qr /$number (?:,\s* $number)*/x;

while ($input =~ s/^\[(?<position>$number_list) \s*\] \s*//x) {
    push @robots => [$+ {position} =~ /$number/g];
}

while ($input =~ s/^\((?<position>$number_list) \s*\) \s*//x) {
    push @steps => [$+ {position} =~ /$number/g];
}

die "Failed to parse input" if $input;


#
# Walk the robots. During each "turn", we compare each robot with
# the first robots (that is, the one with index 0). If any coordinate
# of any robot differs from the corresponding coordinate of the first
# robot, not all robots are at the same position this turn.
#
my $count  = 0;            # Count how often all robots are at the same spot.
my $robot0 = $robots [0];  # Reference robot.
my $board;                 # Keep track of where the robots meet.
while (@steps >= @robots) {
    my $same = 1;
    for (my $r = 0; $r < @robots; $r ++) {
        my $robot = $robots [$r];
        my $step  = shift @steps;

        #
        # Move the robot.
        #
        $$robot [$_] += $$step [$_] for keys @$robot;

        #
        # It's fine to compare the first robot to itself
        #
        $same &&= $$robot [$_] == $$robot0 [$_] for keys @$robot;
    }
    if ($same) {
        $count ++;
        #
        # This is for part 2. We're no longer agnostic about
        # the dimension of the space the robots work in.
        #
        $$board [$$robot0 [1]] [$$robot0 [0]] ++;
    }
}

say "Solution 1: ", $count;
say "Solution 2: ";

#
# For the second part, we only have to display part of the board.
# The full board shows the Info logo, the bottom lines a number.
# The number is the solution to the exercise.
#
foreach my $row (@$board [-5 .. -1]) {
    print $_ ? "#" : ' ' foreach @$row;
    print "\n";
}

__END__
