#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';

#
# Solution for the Infi Advent of Code 2017 problem
#

@ARGV = "input" unless @ARGV;

local $/;
my $input = <>;

my @robots;
my @steps;

#
# Parse the input; we'll be agnostic to the amount of robots,
# or to the dimension of the space they work in.
#
my $number      = qr /[-+]?[0-9]+/;
my $number_list = qr /$number (?:,\s* $number)*/x;

while ($input =~ s/^\[(?<position>$number_list) \s*\] \s*//x) {
    push @robots => [$+ {position} =~ /$number/g];
}

while ($input =~ s/^\((?<position>$number_list) \s*\) \s*//x) {
    push @steps => [$+ {position} =~ /$number/g];
}

die "Failed to parse input" if $input;


#
# Walk the robots. During each "turn", we compare each robot with
# the first robots (that is, the one with index 0). If any coordinate
# of any robot differs from the corresponding coordinate of the first
# robot, not all robots are at the same position this turn.
#
my $count = 0;             # Count how often all robots are at the same spot.
my $robot0 = $robots [0];  # Reference robot.
my $board;                 # Keep track of where the robots meet
while (@steps >= @robots) {
    my $same = 1;
    for (my $r = 0; $r < @robots; $r ++) {
        my $robot = $robots [$r];
        my $step  = shift @steps;

        #
        # Move the robot
        #
        $$robot [$_] += $$step [$_] for keys @$robot;

        #
        # It's fine to compare the first robot to itself
        #
        $same &&= $$robot [$_] == $$robot0 [$_] for keys @$robot;
    }
    if ($same) {
        $count ++;
        #
        # This is for part 2. We're no longer agnostic about
        # the dimension of the space the robots work in.
        #
        $$board [$$robot0 [1]] [$$robot0 [0]] ++;
    }
}

say "Solution 1: ", $count;
say "Solution 2: ";

#
# For the second part, we only have to display part of the board.
# The full board shows the Info logo, the bottom lines a number.
# The number is the solution to the exercise.
#
foreach my $row (@$board [-5 .. -1]) {
    print $_ ? "#" : ' ' foreach @$row;
    print "\n";
}

__END__
