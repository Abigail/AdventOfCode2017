#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use           experimental 'signatures';
no  warnings 'experimental::signatures';

#
# Part 1
#
# You come across an experimental new kind of memory stored on an
# infinite two-dimensional grid.
# 
# Each square on the grid is allocated in a spiral pattern starting
# at a location marked 1 and then counting up while spiraling outward.
# For example, the first few squares are allocated like this:
# 
#      17  16  15  14  13
#      18   5   4   3  12
#      19   6   1   2  11
#      20   7   8   9  10
#      21  22  23---> ...
#
# While this is very space-efficient (no squares are skipped), requested
# data must be carried back to square 1 (the location of the only
# access port for this memory system) by programs that can only move
# up, down, left, or right. They always take the shortest path: the
# Manhattan Distance between the location of the data and square 1.
# 
# For example:
# 
#     Data from square 1 is carried 0 steps, since it's at the access port.
#     Data from square 12 is carried 3 steps, such as: down, left, left.
#     Data from square 23 is carried only 2 steps: up twice.
#     Data from square 1024 must be carried 31 steps.
# 
# How many steps are required to carry the data from the square
# identified in your puzzle input all the way to the access port?
#

#
# Part 2
#
# As a stress test on the system, the programs here clear the grid
# and then store the value 1 in square 1. Then, in the same allocation
# order as shown above, they store the sum of the values in all
# adjacent squares, including diagonals.
# 
# So, the first few squares' values are chosen as follows:
# 
#     Square 1 starts with the value 1.
#     Square 2 has only one adjacent filled square (with value 1),
#              so it also stores 1.
#     Square 3 has both of the above squares as neighbors and stores
#              the sum of their values, 2.
#     Square 4 has all three of the aforementioned squares as neighbors
#              and stores the sum of their values, 4.
#     Square 5 only has the first and fourth squares as neighbors, so
#              it gets the value 5.
#
# Once a square is written, its value does not change. Therefore, the
# first few squares would receive the following values:
# 
#     147  142  133  122   59
#     304    5    4    2   57
#     330   10    1    1   54
#     351   11   23   25   26
#     362  747  806--->   ...
# 
# What is the first value written that is larger than your puzzle input?
#

use List::Util 'min';

my $input = 265149;

#
# Solving part 1
#

#
# Start by finding the corner points of the "ring" the input is in.
# Also record the distance of the "ring" from the center (d1).
#
my $N = 1;
my $d1 = 0;
while ($N * $N < $input) {
    $N += 2;
    $d1 ++;
}
my @corners = map {$N * $N - $_ * ($N - 1)} 3, 2, 1, 0;

#
# Find the mid points of said "ring".
#
my @mids    = map {$_ - ($N - 1) / 2} @corners;

#
# Distance to the mid point
#
my $d2      = min map {abs ($_ - $input)} @mids;

#
# Total distance
#
my $dist    = $d1 + $d2;

say "Solution1: $dist";


#
# Solving part 2
#
# We will be calculating the spiral, tracking numbers calculated so far.
# 

my %values;

my $count = 0;

#
# Move a point in a particular direction.
#
sub move ($point, $direction) {
    [map {$$point [$_] + $$direction [$_]} keys @$point];
}

#
# Set/get the value at a particular point
#
sub set ($point, $value) {
    $values {$$point [0]} {$$point [1]} = $value;
}

sub get ($point) {
    $values {$$point [0]} {$$point [1]};
}


#
# Given a point, calculate the sum of its neighbours.
# Perl conveniently assumes undef to be 0.
#
sub fill ($point) {
    my $sum = 0;
    foreach my $dx (-1 .. 1) {
        foreach my $dy (-1 .. 1) {
            next unless $dx || $dy;  # Could even leave this off...
            no warnings 'uninitialized';
            $sum += get move $point, [$dx, $dy];
        }
    }
    set $point => $sum;
}


#
# Start in the center; initialize center to 1.
my $point = [0, 0];
set ($point => 1);

OUTER: for (my $N = 1; ;$N += 2) {
    $point = move $point => [1, -1];

    #
    # Walk the four edges, each in $N + 1 steps
    #
    foreach my $direction ([0, 1], [-1, 0], [0, -1], [1, 0]) {
        foreach my $step (0 .. $N) {
            $point = move $point => $direction;
            fill $point;
            if (get ($point) > $input) {
                say "Solution 2: ", get ($point);
                last OUTER;
            }
        }
    }
}

__END__
