#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';

#
# Part 1
#
# The CPU itself is a large, black building surrounded by a bottomless
# pit. Enormous metal tubes extend outward from the side of the
# building at regular intervals and descend down into the void. There's
# no way to cross, but you need to get inside.
# 
# No way, of course, other than building a bridge out of the magnetic
# components strewn about nearby.
# 
# Each component has two ports, one on each end. The ports come in
# all different types, and only matching types can be connected. You
# take an inventory of the components by their port types (your puzzle
# input). Each port is identified by the number of pins it uses; more
# pins mean a stronger connection for your bridge. A 3/7 component,
# for example, has a type-3 port on one side, and a type-7 port on
# the other.
# 
# Your side of the pit is metallic; a perfect surface to connect a
# magnetic, zero-pin port. Because of this, the first port you use
# must be of type 0. It doesn't matter what type of port you end with;
# your goal is just to make the bridge as strong as possible.
# 
# The strength of a bridge is the sum of the port types in each
# component. For example, if your bridge is made of components 0/3,
# 3/7, and 7/4, your bridge has a strength of 0+3 + 3+7 + 7+4 = 24.
# 
# For example, suppose you had the following components:
# 
#     0/2
#     2/2
#     2/3
#     3/4
#     3/5
#     0/1
#     10/1
#     9/10
# 
# With them, you could make the following valid bridges:
# 
#     -  0/1
#     -  0/1--10/1
#     -  0/1--10/1--9/10
#     -  0/2
#     -  0/2--2/3
#     -  0/2--2/3--3/4
#     -  0/2--2/3--3/5
#     -  0/2--2/2
#     -  0/2--2/2--2/3
#     -  0/2--2/2--2/3--3/4
#     -  0/2--2/2--2/3--3/5
# 
# (Note how, as shown by 10/1, order of ports within a component
# doesn't matter. However, you may only use each port on a component
# once.)
# 
# Of these bridges, the strongest one is 0/1--10/1--9/10; it has a
# strength of 0+1 + 1+10 + 10+9 = 31.
# 
# What is the strength of the strongest bridge you can make with the
# components you have available?
#

#
# Part 2
#
# The bridge you've built isn't long enough; you can't jump the rest
# of the way.
# 
# In the example above, there are two longest bridges:
# 
#     -  0/2--2/2--2/3--3/4
#     -  0/2--2/2--2/3--3/5
# 
# Of them, the one which uses the 3/5 component is stronger; its
# strength is 0+2 + 2+2 + 2+3 + 3+5 = 19.
# 
# What is the strength of the longest bridge you can make? If you can
# make multiple bridges of the longest length, pick the strongest
# one.
#

@ARGV = "input" unless @ARGV;

use List::Util qw [sum];

#
# Inventory of components
#
my $inventory;

#
# Parse input
#
while (<>) {
    my ($left, $right) = /([0-9]+)/g;
    $$inventory {$left}  {$right} ++;
    $$inventory {$right} {$left}  ++;
}

#
# Make a deep copy of the inventory structure
#
sub copy_i ($inventory) {
    my $copy;
    foreach my $left (keys %$inventory) {
        foreach my $right (keys %{$$inventory {$left}}) {
            $$copy {$left} {$right} = $$inventory {$left} {$right};
        }
    }
    $copy;
}

#
# Copy a bridge
#
sub copy_b ($bridge) {
    my $copy;
    @$copy = @$bridge;
    $copy;
}

#
# We start with an initial port 0, and full inventory
#
my @todo = [[0], $inventory];
my @done;  # Bridges we cannot connect anything to anymore.

#
# For each partial bridge, find all components which can connect
# to it. For each such component, copy the current bridge and
# inventory, connect the component to the copy of the bridge,
# delete the component from the copy of the inventory, and add
# the new bridge and inventory to the @todo structure.
#
# If no component can be found, the bridge cannot be extended,
# and the we put it on the @todo list.
#
while (@todo) {
    my ($bridge, $inventory) = @{shift @todo};

    #
    # Find anything which may connect the end of the bridge
    #
    my $end = $$bridge [-1];
    if ($$inventory {$end} && keys %{$$inventory {$end}}) {
        foreach my $next (keys %{$$inventory {$end}}) {
            my $copy_i = copy_i $inventory;
            my $copy_b = copy_b $bridge;
            push @$copy_b => $end, $next;
            delete $$copy_i {$end}  {$next};
            delete $$copy_i {$next} {$end};
            delete $$copy_i {$next} unless keys %{$$copy_i {$next}};
            delete $$copy_i {$end}  unless keys %{$$copy_i {$end}};
            push @todo => [$copy_b, $copy_i];
        }
    }
    else {
        push @done => $bridge;
    }
}

#
# Find the strongest bridge.
#
my ($strongest) = sort {$b <=> $a} map {sum @$_} @done;

#
# Find the longest bridge; ties are broken
# by strength.
#
my ($longest)   = sort {($$b [0] <=> $$a [0]) || ($$b [1] <=> $$a [1])}
                   map {[scalar (@$_), sum @$_]} @done;

say "Solution 1: ", $strongest;     # Strongest overall.
say "Solution 2: ", $$longest [1];  # Strongest of the longests bridges.


__END__
