#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';

#
# Part 1
#
# You decide to head directly to the CPU and fix the printer from
# there. As you get close, you find an experimental coprocessor doing
# so much work that the local programs are afraid it will halt and
# catch fire. This would cause serious issues for the rest of the
# computer, so you head in and see what you can do.
# 
# The code it's running seems to be a variant of the kind you saw
# recently on that tablet. The general functionality seems very
# similar, but some of the instructions are different:
# 
#    -  set X Y sets register X to the value of Y.
#    -  sub X Y decreases register X by the value of Y.
#    -  mul X Y sets register X to the result of multiplying the
#               value contained in register X by the value of Y.
#    -  jnz X Y jumps with an offset of the value of Y, but only if
#               the value of X is not zero. (An offset of 2 skips
#               the next instruction, an offset of -1 jumps to the
#               previous instruction, and so on.)
# 
# Only the instructions listed above are used. The eight registers
# here, named a through h, all start at 0.
# 
# 
# The coprocessor is currently set to some kind of debug mode, which
# allows for testing, but prevents it from doing any meaningful work.
# 
# If you run the program (your puzzle input), how many times is the
# mul instruction invoked?
# 

#
# Part 2
#
# Now, it's time to fix the problem.
# 
# The debug mode switch is wired directly to register a. You flip the
# switch, which makes register a now start at 1 when the program is
# executed.
# 
# Immediately, the coprocessor begins to overheat. Whoever wrote this
# program obviously didn't choose a very efficient implementation.
# You'll need to optimize the program if it has any hope of completing
# before Santa needs that printer working.
# 
# The coprocessor's ultimate goal is to determine the final value
# left in register h once the program completes. Technically, if it
# had that... it wouldn't even need to run the program.
# 
# After setting register a to 1, if the program were to run to
# completion, what value would be left in register h?
# 

@ARGV = "input" unless @ARGV;

use Puzzle::Stuff::VM::AoC;

my @program;

while (<>) {
    chomp;
    push @program => [split];
}

#
# Take the CPU, and mask the 'mul' function: count how often
# it is invoked, then call the real method.
#
package Puzzle::Stuff::VM::AoC::Day_23 {
    our @ISA = qw [Puzzle::Stuff::VM::AoC];

    use Hash::Util::FieldHash qw [fieldhash];

    fieldhash my %mul_count;

    sub cmd_mul ($self, @args) {
        $mul_count {$self} ++;
        $self -> SUPER::cmd_mul (@args);
    }

    sub mul_count ($self) {
        $mul_count {$self}
    }

    sub run ($self, @args) {
        $mul_count {$self} = 0;
        $self -> SUPER::run (@args);
    }
}

my $vm = Puzzle::Stuff::VM::AoC::Day_23:: -> new
                                          -> init (program => \@program);
$vm -> run;

say "Solution 1: ", $vm -> mul_count;


#
# For part 2, we need to actually inspect what the source code does.
# It turns out, it counts the number of composite numbers between
# the values in registers 'b' and 'c', inclusive, taking steps of 17.
#
sub is_composite ($n) {
    #
    # This is far from the fastest function possible,
    # but it's fast enough for our purpose.
    #
    return 1 unless $n % 2;
    for (my $x = 3; $x ** 2 <= $n; $x += 2) {
        return 1 unless $n % $x;
    }
    return 0;
}

my $b = 93 * 100 + 100_000;
my $c = $b + 17_000;
my $h = 0;
for (my $n = $b; $n <= $c; $n += 17) {
    $h ++ if is_composite ($n);
}

say "Solution 2: ", $h;

__END__
