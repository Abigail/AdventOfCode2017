#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';

#
# Part 1
#
# You discover a tablet containing some strange assembly code labeled
# simply "Duet". Rather than bother the sound card with it, you decide
# to run the code yourself. Unfortunately, you don't see any
# documentation, so you're left to figure out what the instructions
# mean on your own.
# 
# It seems like the assembly is meant to operate on a set of registers
# that are each named with a single letter and that can each hold a
# single integer. You suppose each register should start with a value
# of 0.
# 
# There aren't that many instructions, so it shouldn't be hard to
# figure out what they do. Here's what you determine:
# 
#    - snd X   plays a sound with a frequency equal to the value of X.
#    - set X Y sets register X to the value of Y.
#    - add X Y increases register X by the value of Y.
#    - mul X Y sets register X to the result of multiplying the value
#              contained in register X by the value of Y.
#    - mod X Y sets register X to the remainder of dividing the value
#              contained in register X by the value of Y (that is, it
#              sets X to the result of X modulo Y).
#    - rcv X   recovers the frequency of the last sound played, but only
#              when the value of X is not zero. (If it is zero, the
#              command does nothing.)
#    - jgz X Y jumps with an offset of the value of Y, but only if the
#              value of X is greater than zero. (An offset of 2 skips
#              the next instruction, an offset of -1 jumps to the
#              previous instruction, and so on.)
# 
# Many of the instructions can take either a register (a single letter)
# or a number. The value of a register is the integer it contains;
# the value of a number is that number.
# 
# After each jump instruction, the program continues with the instruction
# to which the jump jumped. After any other instruction, the program
# continues with the next instruction. Continuing (or jumping) off
# either end of the program terminates it.
# 
# For example:
# 
#     set a 1
#     add a 2
#     mul a a
#     mod a 5
#     snd a
#     set a 0
#     rcv a
#     jgz a -1
#     set a 1
#     jgz a -2
# 
#    - The first four instructions set a to 1, add 2 to it, square it,
#      and then set it to itself modulo 5, resulting in a value of 4.
#    - Then, a sound with frequency 4 (the value of a) is played.
#    - After that, a is set to 0, causing the subsequent rcv and jgz
#      instructions to both be skipped (rcv because a is 0, and jgz
#      because a is not greater than 0).
#    - Finally, a is set to 1, causing the next jgz instruction to
#      activate, jumping back two instructions to another jump,
#      which jumps again to the rcv, which ultimately triggers the
#      recover operation.
# 
# At the time the recover operation is executed, the frequency of the
# last sound played is 4.
# 
# What is the value of the recovered frequency (the value of the most
# recently played sound) the first time a rcv instruction is executed
# with a non-zero value?
# 
#
# Part 2
#
# As you congratulate yourself for a job well done, you notice that
# the documentation has been on the back of the tablet this entire
# time. While you actually got most of the instructions correct, there
# are a few key differences. This assembly code isn't about sound at
# all - it's meant to be run twice at the same time.
# 
# Each running copy of the program has its own set of registers and
# follows the code independently - in fact, the programs don't even
# necessarily run at the same speed. To coordinate, they use the send
# (snd) and receive (rcv) instructions:
# 
#    - snd X sends the value of X to the other program. These values
#            wait in a queue until that program is ready to receive them.
#            Each program has its own message queue, so a program can
#            never receive a message it sent.
#    - rcv X receives the next value and stores it in register X.
#            If no values are in the queue, the program waits for a value
#            to be sent to it. Programs do not continue to the next
#            instruction until they have received a value. Values are
#            received in the order they are sent.
# 
# Each program also has its own program ID (one 0 and the other 1);
# the register p should begin with this value.
# 
# For example:
# 
#     snd 1
#     snd 2
#     snd p
#     rcv a
#     rcv b
#     rcv c
#     rcv d
# 
# Both programs begin by sending three values to the other. Program
# 0 sends 1, 2, 0; program 1 sends 1, 2, 1. Then, each program receives
# a value (both 1) and stores it in a, receives another value (both
# 2) and stores it in b, and then each receives the program ID of the
# other program (program 0 receives 1; program 1 receives 0) and
# stores it in c. Each program now sees a different value in its own
# copy of register c.
# 
# Finally, both programs try to rcv a fourth time, but no data is
# waiting for either of them, and they reach a deadlock. When this
# happens, both programs terminate.
# 
# It should be noted that it would be equally valid for the programs
# to run at different speeds; for example, program 0 might have sent
# all three values and then stopped at the first rcv before program
# 1 executed even its first instruction.
# 
# Once both of your programs have terminated (regardless of what
# caused them to do so), how many times did program 1 send a value?
# 


@ARGV = "input" unless @ARGV;

my @instructions;

my %expected_registers = (
    snd => 1,
    set => 2,
    add => 2,
    mul => 2,
    mod => 2,
    rcv => 1,
    jgz => 2,
);

while (<>) {
    chomp;
    my ($command, @registers) = split;
    if (@registers == $expected_registers {$command}) {
        push @instructions => [$command => @registers];
    }
    else {
        die "Failed to parse $_";
    }
}

my $STATUS_RUNNING = 0;
my $STATUS_WAITING = 1;
my $STATUS_DONE    = 2;

package Tablet {
    use Hash::Util::FieldHash qw [fieldhash];

    fieldhash my %registers;
    fieldhash my %pc;
    fieldhash my %status;

    sub new  ($class) {bless do {\my $var} => $class}
    sub init ($self, %args) {
        $registers {$self} = {map {$_ => 0} 'a' .. 'z'};
        $pc        {$self} = 0;
        $status    {$self} = $STATUS_RUNNING;
        $self;
    }

    #
    # Return a value. If the input is the name of a register,
    # we return the value in the register, else we just return
    # the input.
    #
    sub value ($self, $name_or_value) {
        $registers {$self} {$name_or_value} // $name_or_value;
    }

    #
    # set, add, multiply or take the modulus
    #
    sub set ($self, $name, $val) {
        $registers {$self} {$name}  = $self -> value ($val);
    }

    sub add ($self, $name, $val) {
        $registers {$self} {$name} += $self -> value ($val);
    }

    sub mul ($self, $name, $val) {
        $registers {$self} {$name} *= $self -> value ($val);
    }

    sub mod ($self, $name, $val) {
        $registers {$self} {$name} %= $self -> value ($val);
    }

    #
    # Jump an offset. Note that the program counter already has
    # incremented, so we have to subtract one.
    #
    sub jgz ($self, $cond, $offset) {
        if ($self -> value ($cond) > 0) {
            $pc {$self} += $self -> value ($offset) - 1;
        }
    }

    #
    # Return the current status
    #
    sub status ($self) {
        $status {$self};
    }

    #
    # Perform a single instruction. Set status to done if 
    # the program counter gets below 0, or goes outside
    # of the set of instructions.
    #
    sub tick ($self) {
        return unless $self -> status == $STATUS_RUNNING;

        my ($command, @args) = @{$instructions [$pc {$self} ++]};
        $self -> $command (@args);
        $status {$self} = $STATUS_DONE if $pc {$self} < 0 ||
                                          $pc {$self} >= @instructions;
    }

    #
    # The different parts of the puzzle treat the 'snd'
    # and 'rcv' actions differently, so set up different
    # classes from each part, inheriting from the main class.
    #
    # Calling each of the methods in the parent class will
    # be a fatal error.
    #
    sub snd ($self, $freq) {...;}
    sub rcv ($self, $rec)  {...;}

    #
    # Quick and dirty subclasses, which go out and reach into their
    # parents data parts. Yuck.
    #
    package Tablet::Part1 {
        use Hash::Util::FieldHash qw [fieldhash];
        our @ISA = qw [Tablet];

        fieldhash my %last_sound;  # Remember the last sound played.

        #
        # Play sound
        #
        sub snd ($self, $freq) {
            $last_sound {$self} = $self -> value ($freq);
        }

        #
        # Optionally recover a sound played. If we do,
        # that's the end of the program.
        #
        sub rcv ($self, $rec) {
            if ($self -> value ($rec)) {
                $status {$self} = $STATUS_DONE;
            }
        }

        #
        # Retrieve the last sound played
        #
        sub last_sound ($self) {
            $last_sound {$self};
        }
    }

    package Tablet::Part2 {
        use Hash::Util::FieldHash qw [fieldhash];
        our @ISA = qw [Tablet];

        fieldhash my %send_to;     # Which tablet do we send to?
        fieldhash my %queue;       # Queue with values received.
        fieldhash my %times_send;  # Keep track of many times we send.

        #
        # Initialize our stuff, then let the parent class do its thing
        #
        sub init ($self, %args) {
            $send_to {$self}       = delete $args {send_to};
            my $id                 = delete $args {id};
            $queue   {$self}       = [];
            $self -> SUPER::init (%args);
            $registers {$self} {p} = $id;
        }

        #
        # Receive a value: put it in the queue, and if we're
        # in a waiting status, switch back to a running status
        #
        sub received ($self, $value) {
            push @{$queue {$self}} => $value;
            $status {$self} = $STATUS_RUNNING
                  if $status {$self} == $STATUS_WAITING;
        }

        #
        # Send a value to another tablet.
        #
        sub snd ($self, $val) {
            $send_to    {$self} -> received ($self -> value ($val));
            $times_send {$self} ++;
        }

        #
        # Receive an item from the queue, and store it in
        # a register. If the queue is empty, start waiting.
        #
        sub rcv ($self, $reg) {
            if (@{$queue {$self}}) {
                $registers {$self} {$reg} = shift @{$queue {$self}};
            }
            else {
                #
                # Wait. *Decrement* the pc, so the next time
                # around, we'll try again
                #
                $pc {$self} --;
                $status {$self} = $STATUS_WAITING;
            }
        }

        #
        # Return how often we send something.
        #
        sub times_send ($self) {
            $times_send {$self};
        }
    }
}


#
# Part 1
#

{
    my $tablet = Tablet::Part1:: -> new -> init;
    while ($tablet -> status != $STATUS_DONE) {
           $tablet -> tick;
    }
    say "Solution 1: ", $tablet -> last_sound;
}


#
# Part 2
#
{
    my $tablet_0 = Tablet::Part2:: -> new;
    my $tablet_1 = Tablet::Part2:: -> new;
    $tablet_0 -> init (send_to => $tablet_1, id => 0);
    $tablet_1 -> init (send_to => $tablet_0, id => 1);

    #
    # We keep going as long as at least one table is in the running status.
    #
    {
        $tablet_0 -> tick while $tablet_0 -> status == $STATUS_RUNNING;
        $tablet_1 -> tick while $tablet_1 -> status == $STATUS_RUNNING;

        # Only need to check tablet_0 here.
        redo if $tablet_0 -> status == $STATUS_RUNNING;
    }

    say "Solution 2: ", $tablet_1 -> times_send;
}
           



__END__
